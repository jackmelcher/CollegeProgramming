package nachos.threads;

import java.util.LinkedList;

import nachos.machine.*;

/**
 * Uses the hardware timer to provide preemption, and to allow threads to sleep
 * until a certain time.
 */
public class Alarm {
	/**
	 * Allocate a new Alarm. Set the machine's timer interrupt handler to this
	 * alarm's callback.
	 * 
	 * <p>
	 * <b>Note</b>: Nachos will not function correctly with more than one alarm.
	 */
	public Alarm() {
		Machine.timer().setInterruptHandler(new Runnable() {
			public void run() {
				timerInterrupt();
			}
		});
	}

	/**
	 * The timer interrupt handler. This is called by the machine's timer
	 * periodically (approximately every 500 clock ticks). Causes the current
	 * thread to yield, forcing a context switch if there is another thread that
	 * should be run.
	 */
	public void timerInterrupt() {
		while(!waitQueue.isEmpty() && waitQueue.peekFirst().getWakeTime() < Machine.timer().getTime())
		{
			System.out.println("1");
			waitQueue.removeFirst().ready();
		}
		KThread.currentThread().yield();

	}

	/**
	 * Put the current thread to sleep for at least <i>x</i> ticks, waking it up
	 * in the timer interrupt handler. The thread must be woken up (placed in
	 * the scheduler ready set) during the first timer interrupt where
	 * 
	 * <p>
	 * <blockquote> (current time) >= (WaitUntil called time)+(x) </blockquote>
	 * 
	 * @param x the minimum number of clock ticks to wait.
	 * 
	 * @see nachos.machine.Timer#getTime()
	 */
	public void waitUntil(long x) {
		boolean intStatus = Machine.interrupt().disable();
		
		long wakeTime = Machine.timer().getTime() + x;

		KThread.currentThread().setWakeTime(wakeTime);
		if(waitQueue.isEmpty()){
			waitQueue.add(0, KThread.currentThread());
		}
		else{
			for(int i = 0; i < waitQueue.size(); i++){
				KThread thread = waitQueue.get(i);
				if(thread.getWakeTime() > wakeTime){
					waitQueue.add(i, KThread.currentThread());
				}
			}
		}
		//waitQueue.add(KThread.currentThread());
		KThread.sleep();
		Machine.interrupt().restore(intStatus);
	}
	
	private LinkedList<KThread> waitQueue = new LinkedList<KThread>();
}
